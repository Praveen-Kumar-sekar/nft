/* app.get('/', (req, res) => {
    res.status(200).send("Hello iam from NFT Marketplace...")
})
 */

/* app.get('/', (req, res) => {
    res.status(200).json({
        message: "hello i am nft",
        api: "Marketplace"
    })
})

app.post('/', (req, res) => {
    res.status(201).json({ message: "your data" });
})
 */

// differnt form of Router calling for NFTS

/* app.get('/api/v1/nfts', getAllNfts)
app.post('/api/v1/nfts', createNft)
app.get('/api/v1/nfts/:id', getSingleNft)
app.patch('/api/v1/nfts/:id', updateNft)
app.delete('/api/v1/nfts/:id', deleteNft) */


/*
const testNFT = new NFT({
    name: "kumar",
    rating: 3.5,
    price: 33
})
testNFT.save().then(docNFT => {
        console.log(docNFT);

    }).catch(error => {
        console.log("ERROE:", error);
    })*/



--------------------------------------------------------------------------------------------------------------------
    nft controller
    /* const fs = require("fs");

//Get Request
const nfts = JSON.parse(fs.readFileSync(`${__dirname}/../nft-data/data/nft-simple.json`)); */
const NFT = require("./../models/nftModel")

/*exports.checkId = (req, res, next, value) => {
    console.log(`Id: ${value}`);
      if (req.params.id * 1 > nfts.length) {
        return res.status(404).json({
            status: "fail",
            message: "Invalid Id"
        })
    }
 
    next();
}*/
/* exports.checkBody = (req, res, next) => {
    if (!req.body.name || !req.body.price) {
        return res.status(400).json({
            status: "fail",
            message: "Missing name and price",
        })
    }
    next();
} */

exports.getAllNfts = (req, res) => {
    res.status(200).json(

        {
            status: "sucess",
            requestTime: req.requestTime,
            /* results: nfts.length,
            data: {
                nfts: nfts,
            } */
        }
    )
}

// POST METHOD
exports.createNft = (req, res) => {
    /* console.log(req.body); */

    /*  const newId = nfts[nfts.length - 1].id + 1;
     const newNFTs = Object.assign({ id: newId }, req.body);

     nfts.push(newNFTs);
     fs.writeFile(`${__dirname}/nft-data/data/nft-simple.json`, JSON.stringify(nfts), err => {
         res.status(201).json({
             status: "success",
             nft: newNFTs,
         })
     }) */
}

// single get
exports.getSingleNft = (req, res) => {
    const id = req.params.id * 1;
    /* const nft = nfts.find((el) => (el.id === id));
    if ((!nft)) {
        return res.status(404).json({
            status: "fail",
            message: "Invalid ID",
        }) 
    }*/
    res.status(200).json({
        status: "success",
        /* data: {
            nft,
        } */

    })
}

//patch method
exports.updateNft = (req, res) => {

    res.status(200).json({
        status: "success",
        data: {
            nft: "updating success",
        }
    })

}

// delete method
exports.deleteNft = (req, res) => {


    res.status(204).json({
        status: "success",
        data: null
    })

}
-------------------------------------nft controller ends------------------------------------